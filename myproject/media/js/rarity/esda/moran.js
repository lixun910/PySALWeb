
// Author: xunli at asu.edu
define( ["../utils","../../require",'../../parallel'], function(Utils, require, Parallel) {

  var Moran = function() {
    this.y = [ 0.91659 ,  0.      ,  1.568381,  1.968504,  6.333568,  4.820937,
      0.      ,  0.      ,  4.132231,  0.620347,  1.932367,  3.596314,
      2.393776,  2.570694,  1.834862,  4.988914,  1.831502,  1.271456,
      0.755858,  2.066116,  1.331558,  0.      ,  0.788022,  1.429593,
      0.843313,  1.421157,  2.782534,  4.531722,  1.264223,  2.007528,
      1.989555,  0.      ,  2.734482,  1.66251 ,  0.      ,  1.291156,
      1.104667,  2.614379,  0.966417,  0.8285  ,  0.      ,  1.452169,
      1.399384,  5.050505,  0.      ,  2.569373,  1.570916,  1.215067,
      2.971367,  0.651324,  2.748331,  0.868961,  1.197605,  1.500375,
      0.947867,  0.      ,  2.600297,  4.444444,  4.597701,  2.220249,
      4.010695,  2.71166 ,  1.588983,  2.055076,  3.610108,  1.749781,
      1.888218,  2.038169,  0.731886,  2.384738,  2.122241,  1.942502,
      0.      ,  2.786291,  2.557545,  1.220324,  1.876173,  0.      ,
      1.322314,  1.845018,  1.94742 ,  1.865855,  1.730104,  1.021711,
      9.55414 ,  4.685408,  0.      ,  1.610954,  1.451379,  0.      ,
      2.215406,  3.547672,  2.599032,  3.929522,  2.071251,  4.489338,
      3.257329,  4.477612,  2.171553,  2.292526];
    this.w = {0: [1, 18, 17],
       1: [0, 17, 2],
       2: [24, 1, 17, 22, 9],
       3: [6, 55],
       4: [8, 27, 5, 15],
       5: [27, 4, 7],
       6: [16, 3, 7],
       7: [16, 19, 20, 5, 6],
       8: [23, 4, 30, 14, 15],
       9: [24, 25, 2, 11],
       10: [26, 11, 28, 13],
       11: [24, 9, 10, 26, 25],
       12: [29, 36, 13, 14, 23],
       13: [28, 10, 12, 29],
       14: [8, 12, 23],
       15: [32, 35, 4, 8, 23, 27, 30],
       16: [19, 6, 7],
       17: [0, 1, 2, 38, 33, 40, 18, 22],
       18: [0, 17, 21, 33],
       19: [16, 20, 7],
       20: [19, 7],
       21: [33, 18, 31, 42, 45],
       22: [24, 17, 2, 38, 39],
       23: [36, 8, 12, 14, 15, 53, 30],
       24: [2, 39, 9, 11, 22, 41, 25],
       25: [9, 11, 46, 41, 24, 26],
       26: [10, 11, 46, 47, 25, 28],
       27: [43, 35, 4, 5, 15],
       28: [10, 26, 29, 13, 47],
       29: [28, 47, 12, 13, 36],
       30: [32, 36, 8, 15, 48, 53, 23],
       31: [34, 21, 45],
       32: [48, 50, 35, 30, 15],
       33: [40, 42, 17, 18, 51, 21],
       34: [45, 52, 37, 31],
       35: [32, 43, 15, 50, 56, 27],
       36: [30, 12, 47, 53, 23, 29, 62],
       37: [34, 52, 54],
       38: [64, 67, 68, 49, 39, 40, 17, 51, 22],
       39: [24, 49, 38, 22, 41],
       40: [17, 51, 38, 33],
       41: [69, 70, 39, 46, 49, 24, 25],
       42: [64, 33, 45, 51, 21, 60, 63],
       43: [56, 35, 27, 44, 86],
       44: [43, 86],
       45: [34, 42, 52, 21, 60, 31],
       46: [66, 69, 41, 47, 25, 26],
       47: [66, 36, 46, 26, 59, 28, 29, 62],
       48: [32, 50, 53, 58, 61, 30],
       49: [68, 69, 70, 39, 41, 38],
       50: [32, 35, 73, 48, 56, 90, 58],
       51: [64, 33, 38, 40, 42, 63],
       52: [34, 37, 71, 74, 45, 54, 60],
       53: [36, 78, 48, 30, 23, 61, 62],
       54: [65, 37, 71, 74, 52, 57],
       55: [3, 86],
       56: [35, 43, 79, 50, 86, 90],
       57: [72, 65, 77, 54],
       58: [48, 73, 50, 61],
       59: [66, 62, 47],
       60: [71, 42, 76, 45, 52, 63],
       61: [73, 78, 48, 53, 87, 58],
       62: [66, 36, 78, 47, 81, 53, 59],
       63: [64, 75, 42, 51, 60],
       64: [67, 38, 42, 75, 51, 63],
       65: [57, 74, 77, 54],
       66: [91, 69, 46, 47, 81, 85, 88, 59, 62],
       67: [64, 75, 83, 68, 38],
       68: [49, 83, 67, 70, 38],
       69: [66, 70, 41, 46, 49, 84, 88],
       70: [68, 69, 41, 49, 83, 84],
       71: [76, 60, 74, 52, 54],
       72: [80, 57, 77],
       73: [82, 61, 50, 87, 90, 58],
       74: [65, 52, 54, 71],
       75: [64, 67, 63],
       76: [60, 71],
       77: [72, 57, 89, 80, 65],
       78: [96, 81, 53, 87, 61, 62, 95],
       79: [56, 90],
       80: [72, 89, 77],
       81: [66, 78, 85, 93, 62, 95],
       82: [73, 90, 92, 94, 87],
       83: [84, 67, 68, 70],
       84: [88, 83, 69, 70],
       85: [88, 81, 66, 91, 93],
       86: [56, 43, 44, 55],
       87: [96, 73, 78, 82, 92, 61],
       88: [66, 91, 84, 69, 85],
       89: [80, 77],
       90: [73, 82, 79, 50, 56, 94],
       91: [88, 66, 85, 93],
       92: [96, 82, 94, 87],
       93: [81, 95, 91, 85, 97],
       94: [82, 92, 90],
       95: [96, 81, 93, 78, 97],
       96: [97, 98, 99, 78, 87, 92, 95],
       97: [96, 99, 93, 95],
       98: [96, 99],
       99: [96, 97, 98]};
       
    // this.y, this.w
    // w_ij(X_i - X_m)(X_j - X_m)
    // Xi - X_m
    
    var t0 = performance.now();
    this.n = this.y.length;
    this.sum = 0.0;
    
    for (var i=0; i< this.n; i++) {
      this.sum += this.y[i]
    }
    
    this.mean = this.sum / this.n;
    
    this.lower = 0.0;
    
    this.z = [];
   
    var tmp; 
    
    for (var i=0; i< this.n; i++) {
        tmp = this.y[i] - this.mean;
        this.z.push(tmp);
        this.lower += tmp * tmp;
    }
    
    this.upper = 0.0;
    this.sum_of_w = 0;
    this.w_n_dict = {};
    
    for (var i in this.w) {
        var nn = this.w[i],
            j = nn.length;
        this.w_n_dict[i] = j;
        this.sum_of_w += j;
        for (var k=0; k < j; k++) {
            this.upper += this.z[i] * this.z[nn[k]];
        }
    }
    
    this.lower *= this.sum_of_w / this.n;
    this.I = this.upper / this.lower;
    this.EI = -1 / (this.n - 1);
   
    this.permutate(this.z);
    var t1 = performance.now();
    alert((t1-t0)/1000);
  };
  
  
  Moran.prototype = {
    __calc : function(z) {
      var upper = 0.0, tmp;
      
      for (var i in this.w) {
        var nn = this.w[i];
        for (var k=0, j=this.w_n_dict[i]; k < j; k++) {
          upper += z[i] * z[nn[k]];
        }
      }
      return upper / this.lower;   
    },
    
    permutate : function(z, pp) {
      if (pp == undefined) pp = 9999;
      
      var zs = [];      
      for (var i=0; i < pp; i++) {
        z = Utils.shuffle(z);
        zs.push(z);
      }
     
      var log = function() { console.log(arguments); };
      
      var p = new Parallel(zs);
         
      p.map(this.__calc).then(log);
      
     
      /* 
      var larger = 0, sum_I = 0, Is = [], I = 0;
       
      for (var i=0; i < pp; i++) {
        z = Utils.shuffle(z);
        I = this.__calc(z);
        
        if (I >= this.I) larger += 1;
        if ( (pp - larger) < larger ) {
          larger = pp - larger;
        }
        sum_I += I;
        Is.push(I);
      }
      
      this.p_sim = (larger + 1.0) / (pp + 1.0);
      this.EI_sim =  sum_I / pp;
      this.seI_sim = Utils.std(Is);
      this.VI_sim = this.seI_sim * this.seI_sim;
      this.z_sim = (this.I - this.EI_sim) / this.seI_sim;
      
      if (this.z_sim > 0) {
        this.p_z_sim = 1 - Utils.cdf(this.z_sim);
      } else {
        this.p_z_sim = Utils.cdf(this.z_sim);
      }
      */
    },
  };
 
  return Moran;
});
